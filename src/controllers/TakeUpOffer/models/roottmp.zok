const u32 PRIVATE_DATA_LENGTH = PDL;
struct PrivateData {
}
struct PublicData {
}

def areSame<COUNT>(bool[COUNT] result) -> bool{
    u8 mut totalCount = 0;
    for u32 i in 0..COUNT{
        totalCount = (result[i] == true)? totalCount+1 : totalCount+0;
    }
    return (totalCount > 0)? true : false;
}

def compareArrays<COUNT>(u32[COUNT] x, u32[COUNT] y) -> bool {
    bool[COUNT] mut compareResult = [false; COUNT];
    for u32 i in 0..COUNT{

        bool isPrivateNull = (x[i] == 0) ? true : false;
        bool isPublicNull = (y[i] == 0) ? true : false;

        compareResult[i] = if isPrivateNull == false || isPublicNull == false {
            //This is required because if else works in different way in Zokrates
            (x[i] == y[i])?true:false
        } else{
            false
        };
    }
    assert(areSame::<COUNT>(compareResult));
    return true;
}

def compare<COUNT>(field x, field[COUNT] y) -> bool {
    bool[COUNT] mut compareResult = [false; COUNT];

    for u32 i in 0..COUNT {
        compareResult[i] = if(x == y[i]){
            true
        } else {
            false
        };
    }

    assert(areSame::<COUNT>(compareResult));
    return true;
}

def compareRanges(u32[2] x, u32[2] y) -> bool {
    u32 x1 = x[0];
    u32 x2 = x[1];
    u32 y1 = y[0];
    u32 y2 = y[1];

    assert(((y1 <= x1 && x1 <= y2) && (y1 <= x2 && x2 <= y2)) || ((x1 <= y1 && y1 <= x2) && (y1 <= x2 && y2 <= x2)) || !((x1 < y1 && x2 <= y1) || (x1 <= y1 && y1 < x2) || (x1 > y1 && y1 < x2)));

    return true;
}

def main(PrivateData[PRIVATE_DATA_LENGTH] x, PublicData y) {
    for u32 i in 0..PRIVATE_DATA_LENGTH {
    }
    return;
}
