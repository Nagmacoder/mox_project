const u32 PRIVATE_DATA_LENGTH = PDL;
struct PrivateData {
}
struct NonMandateFields {
}
struct PublicData {
}

def areSame<COUNT>(bool[COUNT] result) -> bool{
    u8 mut totalCount = 0;
    for u32 i in 0..COUNT{
        totalCount = (result[i] == true)? totalCount+1 : totalCount+0;
    }
    return (totalCount > 0)? true : false;
}

def compareArrays<COUNT, PRIVATE_COUNT>(u32[COUNT] x, u32[COUNT] y) -> bool {
    u32 compareArrayLength = COUNT * PRIVATE_COUNT;
    bool[compareArrayLength] mut compareResult = [false; compareArrayLength];
    u32 mut counter = 0;
    for u32 i in 0..COUNT{

        bool isPrivateNull = (x[i] == 0) ? true : false;

        for u32 j in 0..PRIVATE_COUNT{
            bool isPublicNull = (y[i] == 0) ? true : false;

            compareResult[counter] = if isPrivateNull == false || isPublicNull == false {
                (x[i] == y[j])?true:false
            } else{
                false
            };
            counter = counter+1;
        }
    }
    assert(areSame::<compareArrayLength>(compareResult));
    return true;
}

def compare<COUNT>(field x, field[COUNT] y) -> bool {
    bool[COUNT] mut compareResult = [false; COUNT];

    for u32 i in 0..COUNT {
        compareResult[i] = if(x == y[i]){
            true
        } else {
            false
        };
    }

    assert(areSame::<COUNT>(compareResult));
    return true;
}

def compareNonMandate<COUNT>(field x, field[COUNT] y) -> bool {
    bool[COUNT] mut compareResult = [false; COUNT];

    for u32 i in 0..COUNT {
        compareResult[i] = if(x == y[i]){
            true
        } else {
            false
        };
    }
    return (areSame::<COUNT>(compareResult))?true:false;
}

def compareNonMandateArrays<COUNT, PRIVATE_COUNT>(u32[COUNT] x, u32[COUNT] y) -> bool {
    u32 compareArrayLength = COUNT * PRIVATE_COUNT;
    bool[compareArrayLength] mut compareResult = [false; compareArrayLength];
    u32 mut counter = 0;
    for u32 i in 0..COUNT{

        bool isPrivateNull = (x[i] == 0) ? true : false;

        for u32 j in 0..PRIVATE_COUNT{
            bool isPublicNull = (y[i] == 0) ? true : false;

            compareResult[counter] = if isPrivateNull == false || isPublicNull == false {
                (x[i] == y[j])?true:false
            } else{
                false
            };
            counter = counter+1;
        }
    }
    return (areSame::<compareArrayLength>(compareResult))?true:false;
}

def didRequiredNumberOfFieldsMatch(u8 fieldMatchCount, NonMandateFields nonMandateData, PrivateData privateData) -> bool {
    u8 mut totalFieldMatchCount = 0;
    return (totalFieldMatchCount >= fieldMatchCount)? true : false;
}

def main(private PrivateData[PRIVATE_DATA_LENGTH] x, PublicData y, NonMandateFields z, u8 fieldMatchCount) {
    for u32 i in 0..PRIVATE_DATA_LENGTH {
        assert(didRequiredNumberOfFieldsMatch(fieldMatchCount, z, x[i]));
    }
    return;
}
